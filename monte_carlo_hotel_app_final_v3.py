import streamlit as st
import numpy as np
import pandas as pd
import re, random
from dataclasses import dataclass
from typing import List, Tuple, Callable, Union
from packaging import version
import copy
import io
import base64
from datetime import datetime
from fpdf import FPDF
from PIL import Image
import os
import matplotlib.pyplot as plt

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Demandas e Dados",
    page_icon="‚ö°",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado para o tema marinho
st.markdown("""
<style>
    .main {
        background-color: #2c3e50;
        color: white;
    }
    
    .stApp {
        background-color: #2c3e50;
    }
    
    .stMarkdown, .stText, .stSelectbox label, .stNumberInput label, 
    .stSlider label, .stTextInput label, .stRadio label, .stFileUploader label,
    .stExpander label, .stDataFrame, .stTable {
        color: white !important;
    }
    
    .stSelectbox > div > div {
        background-color: #34495e;
        color: white;
    }
    
    .stNumberInput > div > div > input, .stTextInput > div > div > input {
        background-color: #34495e;
        color: white;
        border: 1px solid #5d6d7e;
    }
    
    .stButton > button {
        background-color: #3498db;
        color: white;
        border: none;
        border-radius: 5px;
    }
    
    .stButton > button:hover {
        background-color: #2980b9;
    }
    
    .stExpander {
        background-color: #34495e;
        border: 1px solid #5d6d7e;
    }
    
    .stTabs [data-baseweb="tab-list"] {
        background-color: #34495e;
    }
    
    .stTabs [data-baseweb="tab"] {
        color: white;
    }
    
    .stMetric {
        background-color: #34495e;
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #5d6d7e;
    }
    
    .stMetric label, .stMetric div {
        color: white !important;
    }
    
    .stSuccess {
        background-color: #27ae60;
        color: white;
    }
    
    .stInfo {
        background-color: #3498db;
        color: white;
    }
    
    .stWarning {
        background-color: #f39c12;
        color: white;
    }
    
    .stError {
        background-color: #e74c3c;
        color: white;
    }
    
    .header-container {
        display: flex;
        align-items: center;
        margin-bottom: 30px;
        padding: 20px;
        background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
        border-radius: 10px;
        border: 2px solid #5d6d7e;
        width: 100%;
    }
    
    .logo-banner {
        width: 100%;
        height: 120px;
        background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 10px;
        border: 2px solid #5d6d7e;
        margin-bottom: 20px;
        position: relative;
        overflow: hidden;
    }
    
    .logo-banner img {
        height: 100%;
        width: auto;
        object-fit: contain;
    }
    
    .title-overlay {
        position: absolute;
        right: 30px;
        top: 50%;
        transform: translateY(-50%);
        text-align: right;
        color: white;
    }
    
    .title-overlay h1 {
        margin: 0;
        font-size: 2.2rem;
        font-weight: bold;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
    }
    
    .title-overlay p {
        margin: 5px 0 0 0;
        font-size: 1rem;
        opacity: 0.9;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
    }
    
    .sidebar .sidebar-content {
        background-color: #34495e;
    }
    
    .credits-container {
        background: linear-gradient(135deg, #34495e 0%, #2c3e50 100%);
        padding: 20px;
        border-radius: 10px;
        border: 2px solid #5d6d7e;
        margin-top: 20px;
        text-align: center;
    }
    
    .credits-container h3 {
        color: #3498db;
        margin-bottom: 15px;
        font-size: 1.2rem;
    }
    
    .credits-container p {
        color: #bdc3c7;
        margin: 8px 0;
        font-size: 0.9rem;
    }
    
    .credits-container a {
        color: #3498db;
        text-decoration: none;
        font-weight: bold;
    }
    
    .credits-container a:hover {
        color: #2980b9;
        text-decoration: underline;
    }
</style>
""", unsafe_allow_html=True)

# Barra lateral com cr√©ditos
with st.sidebar:
    st.markdown("""
    <div class="credits-container">
        <h3>üíª Desenvolvido por</h3>
        <p><strong>Matheus Vianna</strong></p>
        <p>Engenheiro Especialista em Simula√ß√£o Monte Carlo</p>
        <p>üìß Contato: <a href="mailto:contato@matheusvianna.com">contato@matheusvianna.com</a></p>
        <p>üåê Website: <a href="https://matheusvianna.com" target="_blank">matheusvianna.com</a></p>
        <hr style="border-color: #5d6d7e; margin: 15px 0;">
        <p style="font-size: 0.8rem; color: #95a5a6;">
            Sistema desenvolvido para an√°lise avan√ßada de carga el√©trica utilizando t√©cnicas de simula√ß√£o Monte Carlo com inst√¢ncias individualizadas.
        </p>
        <p style="font-size: 0.8rem; color: #95a5a6;">
            ¬© 2025 - Todos os direitos reservados
        </p>
    </div>
    """, unsafe_allow_html=True)

# Cabe√ßalho com logo em faixa horizontal
try:
    logo = Image.open("logo_demanda_dados.png")
    
    
    # Coluna para a logo
    col_logo, col_spacer = st.columns([1, 3])
    
    with col_logo:
        st.image(logo, width=100vw)
    
    st.markdown("""
        <div class="title-overlay">
            <h1>Demandas e Dados - Simula√ß√£o para An√°lise de Carga El√©trica </h1>
        </div>
    """, unsafe_allow_html=True)
    
except:
    st.markdown("""
    <div class="logo-banner">
        <div class="title-overlay" style="left: 50%; transform: translate(-50%, -50%); text-align: center;">
            <h1>Demandas e Dados - Simula√ß√£o para An√°lise de Carga El√©trica</h1>
            
        </div>
    </div>
    """, unsafe_allow_html=True)

# Se√ß√£o "Como Usar o Aplicativo"
with st.expander("üìñ Como Usar o Aplicativo", expanded=False):
    st.markdown("""
    ## Guia Completo de Uso
    
    ### üéØ **Objetivo do Aplicativo**
    Este aplicativo utiliza a t√©cnica de **Simula√ß√£o Monte Carlo** para analisar o comportamento da carga el√©trica em hot√©is, considerando a variabilidade natural do uso de equipamentos pelos h√≥spedes. O sistema simula milhares de cen√°rios diferentes para fornecer estat√≠sticas confi√°veis para o dimensionamento da infraestrutura el√©trica.
    
    ### üîß **Metodologia de Simula√ß√£o**
    - **Inst√¢ncias Individualizadas**: Cada quarto √© tratado como uma entidade √∫nica com comportamento aleat√≥rio independente
    - **Variabilidade Temporal**: Equipamentos podem ter intervalos fixos ou din√¢micos de funcionamento
    - **Fatores Probabil√≠sticos**: Considera a probabilidade de cada equipamento estar em uso
    - **Fator de Demanda**: Aplica fatores de redu√ß√£o baseados no uso real dos equipamentos
    
    ### üìä **Passo a Passo de Uso**
    
    #### **1. Configura√ß√£o de Dados**
    **Op√ß√£o A - Upload de Excel:**
    - Prepare um arquivo Excel com abas nomeadas pelos tipos de c√¥modos (ex: "Quarto Standard", "Su√≠te Master")
    - Cada aba deve conter as colunas: Equipamento, Pot√™ncia, Quantidade, Tipo de intervalo, intervalo, probabilidade, FD
    - Fa√ßa o upload do arquivo na se√ß√£o correspondente
    
    **Op√ß√£o B - Entrada Direta:**
    - Defina o n√∫mero de tipos de c√¥modos diferentes
    - Para cada c√¥modo, configure os equipamentos com suas caracter√≠sticas:
      - **Nome**: Identifica√ß√£o do equipamento
      - **Pot√™ncia (W)**: Consumo nominal em watts
      - **Quantidade**: N√∫mero de unidades do equipamento no c√¥modo
      - **Tipo de intervalo**: "fixo" para hor√°rios definidos ou "din√¢mico" para hor√°rios vari√°veis
      - **Intervalo**: Per√≠odo de funcionamento (ex: "08:00 as 18:00" ou "In√≠cio entre 14:00-18:00, dura√ß√£o 6")
      - **Probabilidade**: Chance do equipamento estar ligado (0.0 a 1.0)
      - **Fator de Demanda**: Fator de redu√ß√£o do consumo real (0.1 a 1.0)
    
    #### **2. Par√¢metros de Simula√ß√£o**
    - **N√∫mero de Simula√ß√µes**: Recomendado entre 1000-5000 para resultados estatisticamente significativos
    - **Tempo Total**: Per√≠odo de an√°lise em minutos (1440 = 24 horas)
    
    #### **3. Inst√¢ncias por C√¥modo**
    - Defina quantas unidades de cada tipo de c√¥modo existem no hotel
    - Cada inst√¢ncia ser√° simulada independentemente
    
    #### **4. Execu√ß√£o e Resultados**
    - Execute a simula√ß√£o e analise os resultados em diferentes visualiza√ß√µes
    - Gere o relat√≥rio PDF t√©cnico com todas as an√°lises e recomenda√ß√µes
    
    ### üìà **Interpreta√ß√£o dos Resultados**
    
    #### **M√©tricas Principais:**
    - **Pico M√©dio**: Valor esperado da demanda m√°xima
    - **Percentil 95**: Valor recomendado para dimensionamento (95% dos casos ficam abaixo)
    - **Pico M√°ximo**: Maior valor observado nas simula√ß√µes
    - **Pico M√≠nimo**: Menor valor observado nas simula√ß√µes
    
    #### **Gr√°ficos de An√°lise:**
    - **Distribui√ß√£o dos Picos**: Mostra a frequ√™ncia dos diferentes valores de pico
    - **Curva de Dura√ß√£o**: Indica por quanto tempo cada n√≠vel de carga √© mantido
    - **Perfil de Carga**: Revela os padr√µes de consumo ao longo do dia
    - **Pot√™ncia Cumulativa**: Mostra a contribui√ß√£o de cada tipo de c√¥modo
    
    ### ‚ö° **Recomenda√ß√µes de Dimensionamento**
    - Use o **Percentil 95** como base para dimensionamento
    - Adicione uma margem de seguran√ßa de 15-20%
    - Considere fatores de crescimento futuro
    - Monitore o comportamento real para validar as simula√ß√µes
    
    ### üîç **Dicas Importantes**
    - Intervalos din√¢micos s√£o mais realistas para equipamentos como ar-condicionado
    - Fatores de demanda devem refletir o uso real dos equipamentos
    - Probabilidades menores que 1.0 representam equipamentos de uso ocasional
    - Maior n√∫mero de simula√ß√µes aumenta a precis√£o dos resultados
    """, unsafe_allow_html=True)

# --- Definindo a palavra-chave para boxplot conforme a vers√£o do Matplotlib ---
if version.parse(plt.matplotlib.__version__) >= version.parse("3.9"):
    boxplot_kw_global = {"tick_labels": ["Picos do Hotel"]}
else:
    boxplot_kw_global = {"labels": ["Picos do Hotel"]}

# --- Tipos e Fun√ß√µes de Convers√£o de Hor√°rios ---
IntervalType = Union[List[Tuple[int, int]], Callable[[], List[Tuple[int, int]]]]

def parse_time(time_str: str) -> int:
    parts = time_str.strip().split(":")
    if len(parts) == 1:
        hours = int(parts[0])
        minutes = 0
    else:
        hours = int(parts[0])
        minutes = int(parts[1])
    return hours * 60 + minutes

def parse_intervalo_fixo(interval_str: str) -> List[Tuple[int, int]]:
    interval_str = interval_str.replace("√†s", "as")
    parts = interval_str.split(" e ")
    intervals = []
    for part in parts:
        times = part.split(" as ")
        if len(times) != 2:
            continue
        start = parse_time(times[0])
        end = parse_time(times[1])
        intervals.append((start, end))
    return intervals

def parse_intervalo_dinamico_split(interval_str: str) -> Callable[[], List[Tuple[int, int]]]:
    """
    Interpreta um intervalo din√¢mico onde:
      - A express√£o √© do tipo: "In√≠cio entre 10:30-14, dura√ß√£o 2"
      - A dura√ß√£o total (por exemplo, 2 horas = 120 minutos) ser√° dividida em 1 a 3 segmentos.
      - Cada segmento ser√° separado por um gap aleat√≥rio de at√© 30 minutos.
    Retorna uma fun√ß√£o que gera uma lista de intervalos (em minutos).
    """
    parts = interval_str.split(";")
    def dynamic_intervals():
        intervals = []
        for part in parts:
            part = part.strip()
            m = re.search(r'(?i)entre\s*([\d:]+)\s*-\s*([\d:]+)', part)
            m2 = re.search(r'(?i)dura√ß√£o\s*(\d+)', part)
            if m and m2:
                start_lower = parse_time(m.group(1))
                start_upper = parse_time(m.group(2))
                total_duration_minutes = int(m2.group(1)) * 60  # dura√ß√£o total em minutos
                
                # Decide o n√∫mero de segmentos (entre 1 e 3)
                num_segments = random.randint(1, 3)
                
                # Se a dura√ß√£o for muito curta, use apenas 1 segmento
                if total_duration_minutes < 2:
                    segments = [total_duration_minutes]
                else:
                    # Dispon√≠veis s√£o os n√∫meros de 1 at√© total_duration_minutes-1
                    available = total_duration_minutes - 1
                    # N√∫mero de cortes n√£o pode ser maior que o n√∫mero de elementos dispon√≠veis
                    num_cuts = min(num_segments - 1, available)
                    if num_cuts > 0:
                        cut_points = sorted(random.sample(range(1, total_duration_minutes), num_cuts))
                        segments = []
                        previous = 0
                        for cp in cut_points:
                            segments.append(cp - previous)
                            previous = cp
                        segments.append(total_duration_minutes - previous)
                    else:
                        segments = [total_duration_minutes]
                
                # Escolhe o in√≠cio do primeiro segmento aleatoriamente entre start_lower e start_upper.
                first_start = random.randint(start_lower, start_upper)
                seg_intervals = []
                current_start = first_start
                for seg_duration in segments:
                    seg_intervals.append((current_start, current_start + seg_duration))
                    # Gap aleat√≥rio entre 0 e 30 minutos antes do pr√≥ximo segmento
                    gap = random.randint(0, 30)
                    current_start = current_start + seg_duration + gap
                intervals.extend(seg_intervals)
        return intervals if intervals else [(0, 60)]
    return dynamic_intervals

# --- Defini√ß√£o das Classes ---
@dataclass
class Equipamento:
    nome: str
    potencia: float
    quantidade: int
    intervalos: IntervalType
    probabilidade: float = 1.0
    fator_demanda: float = 1.0

    def simula_carga(self, tempo_total: int = 1440):
        carga = np.zeros(tempo_total)
        intervals = self.intervalos() if callable(self.intervalos) else self.intervalos
        if np.random.rand() < self.probabilidade:
            # Aplicando o fator de demanda √† pot√™ncia
            potencia_efetiva = self.potencia * self.fator_demanda
            for inicio, fim in intervals:
                inicio = max(0, inicio)
                fim = min(tempo_total, fim)
                carga[inicio:fim] += potencia_efetiva * self.quantidade
        return carga

@dataclass
class Comodo:
    nome: str
    equipamentos: List[Equipamento]

    def simula_carga(self, tempo_total: int = 1440):
        carga_total = np.zeros(tempo_total)
        for eq in self.equipamentos:
            carga_total += eq.simula_carga(tempo_total)
        return carga_total

# --- Fun√ß√µes para Criar Objetos a partir da Planilha ---
def cria_comodo_da_planilha(sheet_df: pd.DataFrame, comodo_nome: str) -> Comodo:
    equipamentos = []
    for idx, row in sheet_df.iterrows():
        nome = row["Equipamento"]
        potencia = float(row["Pot√™ncia"])
        quantidade = int(row["Quantidade"])
        tipo_intervalo = str(row["Tipo de intervalo"]).strip().lower()
        intervalo_str = str(row["intervalo"]).strip()
        probabilidade = float(row["probabilidade"])
        fd = float(row["FD"])
        
        if tipo_intervalo == "fixo":
            intervalos = parse_intervalo_fixo(intervalo_str)
        elif tipo_intervalo == "din√¢mico":
            # Utiliza a nova fun√ß√£o que fragmenta a dura√ß√£o com gap de at√© 30 minutos
            intervalos = parse_intervalo_dinamico_split(intervalo_str)
        else:
            intervalos = parse_intervalo_fixo(intervalo_str)
        
        eq = Equipamento(
            nome=nome,
            potencia=potencia,
            quantidade=quantidade,
            intervalos=intervalos,
            probabilidade=probabilidade,
            fator_demanda=fd
        )
        equipamentos.append(eq)
    return Comodo(nome=comodo_nome, equipamentos=equipamentos)

def cria_comodos_do_excel(uploaded_file) -> List[Comodo]:
    sheets = pd.read_excel(uploaded_file, sheet_name=None)
    comodos = []
    for sheet_name, df in sheets.items():
        comodo = cria_comodo_da_planilha(df, sheet_name)
        comodos.append(comodo)
    return comodos

def cria_comodos_do_dataframe(df_dict: dict) -> List[Comodo]:
    """Cria c√¥modos a partir de um dicion√°rio de DataFrames"""
    comodos = []
    for comodo_nome, df in df_dict.items():
        if not df.empty:
            comodo = cria_comodo_da_planilha(df, comodo_nome)
            comodos.append(comodo)
    return comodos

def cria_comodos_individualizados(comodos: List[Comodo], instancias_por_comodo: dict) -> List[Comodo]:
    """
    Cria inst√¢ncias individualizadas de cada c√¥modo, com identificadores √∫nicos.
    Por exemplo, se tivermos 3 inst√¢ncias de "Quarto 1", ser√£o criados:
    "Quarto 1.1", "Quarto 1.2" e "Quarto 1.3", cada um com seu pr√≥prio comportamento aleat√≥rio.
    """
    comodos_individualizados = []
    
    for comodo in comodos:
        qtd = instancias_por_comodo.get(comodo.nome, 1)
        
        for i in range(qtd):
            # Cria uma c√≥pia profunda dos equipamentos para cada inst√¢ncia individualizada
            equipamentos_copia = []
            for eq in comodo.equipamentos:
                # Cria uma c√≥pia do equipamento com os mesmos par√¢metros
                # mas potencialmente com comportamento aleat√≥rio diferente
                eq_copia = Equipamento(
                    nome=eq.nome,
                    potencia=eq.potencia,
                    quantidade=eq.quantidade,
                    intervalos=eq.intervalos,  # Isso manter√° a mesma fun√ß√£o geradora, mas com resultados aleat√≥rios diferentes
                    probabilidade=eq.probabilidade,
                    fator_demanda=eq.fator_demanda
                )
                equipamentos_copia.append(eq_copia)
            
            # Cria um novo c√¥modo com nome individualizado (ex: "Quarto 1.3")
            nome_individualizado = f"{comodo.nome}.{i+1}"
            comodo_individualizado = Comodo(nome=nome_individualizado, equipamentos=equipamentos_copia)
            comodos_individualizados.append(comodo_individualizado)
    
    return comodos_individualizados

def simula_carga_total(comodos: List[Comodo],
                       instancias_por_comodo: dict,
                       num_simulacoes: int = 1000,
                       tempo_total: int = 1440) -> (np.ndarray, np.ndarray, np.ndarray):
    """
    Executa as simula√ß√µes e retorna:
      - picos: array com os picos de carga de cada simula√ß√£o.
      - perfis: array 2D com os perfis de carga (cada linha √© uma simula√ß√£o).
      - consumos_diarios: array com o consumo di√°rio (kWh) de cada simula√ß√£o.
      
    Nota: Esta vers√£o cria inst√¢ncias individualizadas de cada c√¥modo,
    garantindo que cada inst√¢ncia tenha seu pr√≥prio comportamento aleat√≥rio.
    """
    picos = []
    perfis = []
    consumos_diarios = []
    
    # Cria inst√¢ncias individualizadas de cada c√¥modo
    comodos_individualizados = cria_comodos_individualizados(comodos, instancias_por_comodo)
    
    for _ in range(num_simulacoes):
        load_total = np.zeros(tempo_total)
        
        # Simula cada c√¥modo individualizado
        for comodo in comodos_individualizados:
            carga_instancia = comodo.simula_carga(tempo_total)
            load_total += carga_instancia
        
        picos.append(np.max(load_total))
        perfis.append(load_total)
        consumo = np.sum(load_total) / 1000 / 60  # convers√£o para kWh/dia
        consumos_diarios.append(consumo)
    
    return np.array(picos), np.array(perfis), np.array(consumos_diarios)

# Fun√ß√£o para salvar gr√°ficos como imagens
def salvar_grafico(fig, nome_arquivo):
    """Salva um gr√°fico matplotlib como imagem PNG"""
    caminho = f"/tmp/{nome_arquivo}.png"
    fig.savefig(caminho, dpi=300, bbox_inches='tight', facecolor='white')
    return caminho

# Fun√ß√£o para gerar PDF com os resultados (vers√£o aprimorada com FPDF2)
def gerar_pdf_relatorio(resultados, instancias_por_comodo, num_simulacoes, tempo_total, imagens_graficos=None, comodos_config_data=None, comodos_originais=None):
    """Gera um relat√≥rio PDF t√©cnico aprimorado com os resultados da simula√ß√£o usando FPDF2"""
    
    pdf = FPDF()
    pdf.add_page()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.set_font("Times", size=12)

    # T√≠tulo do Relat√≥rio
    pdf.set_font("Times", "B", 16)
    pdf.multi_cell(0, 10, "RELAT√ìRIO T√âCNICO DE SIMULA√á√ÉO MONTE CARLO", align="C")
    pdf.set_font("Times", "", 12)
    pdf.multi_cell(0, 8, "An√°lise de Carga El√©trica para Dimensionamento de Infraestrutura Hoteleira", align="C")
    pdf.ln(5)
    pdf.multi_cell(0, 6, f"Data de gera√ß√£o: {datetime.now().strftime("%d/%m/%Y √†s %H:%M")}", align="C")
    pdf.multi_cell(0, 6, "Sistema: Simula√ß√£o Monte Carlo com Inst√¢ncias Individualizadas", align="C")
    pdf.ln(10)

    # Cr√©ditos do Desenvolvedor
    pdf.set_fill_color(230, 242, 255) # Light blue background
    pdf.rect(pdf.get_x(), pdf.get_y(), pdf.w - 2*pdf.l_margin, 40, 'F')
    pdf.set_text_color(44, 62, 80) # Dark blue text
    pdf.set_font("Times", "B", 14)
    pdf.multi_cell(0, 8, "üíª Sistema Desenvolvido por Matheus Vianna", align="C")
    pdf.set_font("Times", "", 10)
    pdf.multi_cell(0, 6, "Engenheiro Especialista em Simula√ß√£o Monte Carlo", align="C")
    pdf.multi_cell(0, 6, "Website: matheusvianna.com", align="C", link="https://matheusvianna.com")
    pdf.multi_cell(0, 6, "Sistema avan√ßado para an√°lise de carga el√©trica utilizando t√©cnicas de simula√ß√£o Monte Carlo", align="C")
    pdf.set_text_color(0, 0, 0) # Reset text color
    pdf.ln(10)

    # 1. Metodologia e Fundamentos Te√≥ricos
    pdf.set_font("Times", "B", 14)
    pdf.multi_cell(0, 10, "1. METODOLOGIA E FUNDAMENTOS TE√ìRICOS", align="J")
    pdf.set_font("Times", "", 12)
    pdf.multi_cell(0, 7, "A simula√ß√£o Monte Carlo √© uma t√©cnica estat√≠stica que utiliza amostragem aleat√≥ria repetitiva para obter resultados num√©ricos de problemas complexos. No contexto deste estudo, a metodologia foi aplicada para modelar o comportamento estoc√°stico da demanda el√©trica em estabelecimentos hoteleiros, considerando a variabilidade natural do uso de equipamentos pelos h√≥spedes.", align="J")
    pdf.multi_cell(0, 7, f"O sistema implementado realiza {num_simulacoes:,} simula√ß√µes independentes, cada uma representando um cen√°rio poss√≠vel de opera√ß√£o do hotel durante um per√≠odo de {tempo_total // 60} horas. Esta abordagem permite capturar a incerteza inerente ao comportamento dos usu√°rios e fornecer estat√≠sticas robustas para o dimensionamento da infraestrutura el√©trica.", align="J")
    pdf.ln(5)
    pdf.set_font("Times", "B", 12)
    pdf.multi_cell(0, 7, "1.1 Modelagem de Inst√¢ncias Individualizadas", align="J")
    pdf.set_font("Times", "", 12)
    pdf.multi_cell(0, 7, "Uma caracter√≠stica fundamental desta simula√ß√£o √© o tratamento individualizado de cada unidade habitacional. Quando o hotel possui m√∫ltiplas unidades do mesmo tipo (por exemplo, 28 quartos padr√£o), cada uma √© modelada como uma entidade independente com seu pr√≥prio comportamento aleat√≥rio. Esta abordagem √© crucial para capturar adequadamente o fator de diversidade, que representa a probabilidade de que nem todos os equipamentos operem simultaneamente em sua capacidade m√°xima.", align="J")
    pdf.ln(5)
    pdf.set_font("Times", "B", 12)
    pdf.multi_cell(0, 7, "1.2 Par√¢metros de Entrada e Configura√ß√£o", align="J")
    pdf.set_font("Times", "", 12)
    pdf.multi_cell(0, 7, f"N√∫mero total de simula√ß√µes realizadas: {num_simulacoes:,}", align="J")
    pdf.multi_cell(0, 7, f"Per√≠odo de an√°lise por simula√ß√£o: {tempo_total} minutos ({tempo_total // 60} horas)", align="J")
    pdf.multi_cell(0, 7, f"Resolu√ß√£o temporal: 1 minuto", align="J")
    pdf.multi_cell(0, 7, f"M√©todo de amostragem: Pseudo-aleat√≥rio com distribui√ß√µes espec√≠ficas por equipamento", align="J")
    pdf.ln(10)

    # Calcula estat√≠sticas adicionais
    picos = resultados["picos"]
    perfis = resultados["perfis"]
    consumos = resultados["consumos"]
    
    pico_medio = np.mean(picos)
    pico_max = np.max(picos)
    pico_min = np.min(picos)
    pico_95 = np.percentile(picos, 95)
    desvio_padrao = np.std(picos)
    coef_variacao = (desvio_padrao / pico_medio) * 100
    consumo_medio = np.mean(consumos)
    
    # Calcula fator de carga m√©dio
    media_por_minuto = np.mean(perfis, axis=0)
    fator_carga_medio = (np.mean(media_por_minuto) / np.max(media_por_minuto)) * 100
    
    # Intervalo de confian√ßa 95%
    ic_inferior = np.percentile(picos, 2.5)
    ic_superior = np.percentile(picos, 97.5)
    
    # Capacidade recomendada (P95 + 20%)
    capacidade_recomendada = pico_95 * 1.2
    
    # Fator de diversidade
    total_potencia_instalada_comodos = 0
    if comodos_originais:
        for comodo_obj in comodos_originais:
            total_potencia_instalada_comodos += sum(eq.potencia * eq.quantidade for eq in comodo_obj.equipamentos) * instancias_por_comodo.get(comodo_obj.nome, 1)

    fator_diversidade = pico_medio / total_potencia_instalada_comodos if total_potencia_instalada_comodos > 0 else 0
    
    # Interpreta√ß√µes t√©cnicas
    if coef_variacao < 15:
        interpretacao_diversidade = "baixa variabilidade, comportamento previs√≠vel e est√°vel"
    elif coef_variacao < 30:
        interpretacao_diversidade = "variabilidade moderada, comportamento t√≠pico para instala√ß√µes hoteleiras"
    else:
        interpretacao_diversidade = "alta variabilidade, requer monitoramento e an√°lise adicional"
    
    if fator_carga_medio > 70:
        interpretacao_fator_carga = "indica utiliza√ß√£o eficiente da infraestrutura el√©trica"
    elif fator_carga_medio > 50:
        interpretacao_fator_carga = "indica utiliza√ß√£o moderada da infraestrutura el√©trica"
    else:
        interpretacao_fator_carga = "indica potencial de otimiza√ß√£o da infraestrutura el√©trica"
    
    # 2. Resultados Estat√≠sticos e An√°lise de Demanda
    pdf.set_font("Times", "B", 14)
    pdf.multi_cell(0, 10, "2. RESULTADOS ESTAT√çSTICOS E AN√ÅLISE DE DEMANDA", align="J")
    pdf.set_font("Times", "", 12)
    pdf.multi_cell(0, 7, f"Demanda M√©dia M√°xima: {pico_medio:.0f} W", align="J")
    pdf.multi_cell(0, 7, f"Demanda M√°xima Absoluta: {pico_max:.0f} W", align="J")
    pdf.multi_cell(0, 7, f"Demanda M√≠nima Observada: {pico_min:.0f} W", align="J")
    pdf.multi_cell(0, 7, f"Percentil 95 (P95): {pico_95:.0f} W", align="J")
    pdf.ln(5)
    pdf.multi_cell(0, 7, f"O Percentil 95 (P95) de {pico_95:.0f} W representa o valor de demanda que √© excedido em apenas 5% dos cen√°rios simulados. Este valor √© amplamente reconhecido na engenharia el√©trica como refer√™ncia para dimensionamento de sistemas, pois oferece um equil√≠brio adequado entre seguran√ßa operacional e viabilidade econ√¥mica.", align="J")
    pdf.multi_cell(0, 7, f"A Demanda M√©dia M√°xima de {pico_medio:.0f} W indica o valor esperado da demanda de pico, enquanto a Demanda M√°xima Absoluta de {pico_max:.0f} W representa o cen√°rio mais cr√≠tico observado nas simula√ß√µes, que possui probabilidade muito baixa de ocorr√™ncia.", align="J")
    pdf.ln(10)

    # 3. Configura√ß√£o Detalhada dos C√¥modos
    pdf.set_font("Times", "B", 14)
    pdf.multi_cell(0, 10, "3. CONFIGURA√á√ÉO DETALHADA DOS C√îMODOS", align="J")
    pdf.set_font("Times", "B", 12)
    pdf.multi_cell(0, 7, "3.1 Resumo por Tipo de C√¥modo", align="J")
    pdf.set_font("Times", "", 10)

    # Tabela de Resumo por Tipo de C√¥modo
    table_data = [["Tipo de C√¥modo", "N√∫mero de Inst√¢ncias", "Demanda Estimada por Inst√¢ncia (W)", "Contribui√ß√£o Total (%)"]]
    total_instancias = sum(instancias_por_comodo.values())
    for comodo, instancias in instancias_por_comodo.items():
        potencia_estimada = (pico_medio / total_instancias * instancias) if total_instancias > 0 else 0
        table_data.append([
            comodo,
            str(instancias),
            f"{potencia_estimada:.0f}",
            f"{(instancias / total_instancias * 100):.1f}%"
        ])
    
    # Calculate column widths to fit content and page width
    col_widths = [pdf.get_string_width(str(item)) for item in table_data[0]]
    for row in table_data[1:]:
        for i, cell in enumerate(row):
            col_widths[i] = max(col_widths[i], pdf.get_string_width(str(cell)))
    
    # Add some padding
    col_widths = [w + 6 for w in col_widths]
    
    # Distribute remaining space if total width is less than page width
    total_table_width = sum(col_widths)
    page_width = pdf.w - 2 * pdf.l_margin
    if total_table_width < page_width:
        extra_space_per_col = (page_width - total_table_width) / len(col_widths)
        col_widths = [w + extra_space_per_col for w in col_widths]

    for row in table_data:
        for i, cell in enumerate(row):
            pdf.multi_cell(col_widths[i], 8, cell, border=1, align="C" if i > 0 else "L", ln=3)
        pdf.ln(8)
    pdf.ln(5)

    # Tabela de Especifica√ß√£o T√©cnica dos Equipamentos
    if comodos_config_data:
        pdf.set_font("Times", "B", 12)
        pdf.multi_cell(0, 7, "3.2 Especifica√ß√£o T√©cnica dos Equipamentos", align="J")
        pdf.set_font("Times", "", 10)
        pdf.multi_cell(0, 7, "A tabela a seguir apresenta a configura√ß√£o detalhada de cada equipamento por tipo de c√¥modo, incluindo caracter√≠sticas operacionais e par√¢metros de simula√ß√£o utilizados.", align="J")
        pdf.ln(5)
        
        for comodo_nome, equipamentos_df_list in comodos_config_data.items():
            pdf.set_font("Times", "B", 11)
            pdf.multi_cell(0, 7, f"C√¥modo: {comodo_nome}", align="J")
            pdf.set_font("Times", "", 9)
            
            equip_table_data = [["Equipamento", "Pot√™ncia (W)", "Quantidade", "Tipo de Opera√ß√£o", "Per√≠odo de Funcionamento", "Probabilidade de Uso", "Fator de Demanda"]]
            for row in equipamentos_df_list:
                equip_table_data.append([
                    row["Equipamento"],
                    str(row["Pot√™ncia"]),
                    str(row["Quantidade"]),
                    str(row["Tipo de intervalo"]).title(),
                    str(row["intervalo"]),
                    f"{row["probabilidade"] * 100:.1f}%",
                    f"{row["FD"]:.2f}"
                ])
            
            # Calculate column widths for equipment table
            equip_col_widths = [pdf.get_string_width(str(item)) for item in equip_table_data[0]]
            for row in equip_table_data[1:]:
                for i, cell in enumerate(row):
                    equip_col_widths[i] = max(equip_col_widths[i], pdf.get_string_width(str(cell)))
            
            equip_col_widths = [w + 4 for w in equip_col_widths] # Add padding
            
            total_equip_table_width = sum(equip_col_widths)
            if total_equip_table_width < page_width:
                extra_space_per_col = (page_width - total_equip_table_width) / len(equip_col_widths)
                equip_col_widths = [w + extra_space_per_col for w in equip_col_widths]

            for row in equip_table_data:
                for i, cell in enumerate(row):
                    pdf.multi_cell(equip_col_widths[i], 7, cell, border=1, align="C" if i in [1,2,5,6] else "L", ln=3)
                pdf.ln(7)
            pdf.ln(5)

    pdf.ln(10)

    # 4. An√°lises Gr√°ficas e Interpreta√ß√µes T√©cnicas
    if imagens_graficos:
        pdf.set_font("Times", "B", 14)
        pdf.multi_cell(0, 10, "4. AN√ÅLISES GR√ÅFICAS E INTERPRETA√á√ïES T√âCNICAS", align="J")
        pdf.set_font("Times", "", 12)
        pdf.multi_cell(0, 7, "As an√°lises gr√°ficas apresentadas a seguir fornecem insights fundamentais sobre o comportamento da demanda el√©trica do estabelecimento, permitindo uma compreens√£o abrangente dos padr√µes de consumo e suas implica√ß√µes para o dimensionamento da infraestrutura.", align="J")
        pdf.ln(5)
        
        for imagem in imagens_graficos:
            pdf.set_font("Times", "B", 12)
            pdf.multi_cell(0, 7, imagem["titulo"], align="C")
            pdf.ln(2)
            
            # Adiciona a imagem
            img_path = imagem["caminho"]
            if img_path and os.path.exists(img_path):
                # Get image dimensions to fit page
                img = Image.open(img_path)
                img_width, img_height = img.size
                
                # Max width for image in PDF
                max_img_width = pdf.w - 2 * pdf.l_margin - 10 # 10 for extra padding
                
                # Calculate new dimensions to maintain aspect ratio
                if img_width > max_img_width:
                    scale_factor = max_img_width / img_width
                    img_width = max_img_width
                    img_height = img_height * scale_factor
                
                # Center image
                x_pos = (pdf.w - img_width) / 2
                pdf.image(img_path, x=x_pos, w=img_width)
                pdf.ln(5)
            
            pdf.set_font("Times", "", 10)
            pdf.multi_cell(0, 6, "An√°lise T√©cnica: " + imagem["descricao"], align="J")
            pdf.ln(10)

    # 5. An√°lise Estat√≠stica Avan√ßada
    pdf.set_font("Times", "B", 14)
    pdf.multi_cell(0, 10, "5. AN√ÅLISE ESTAT√çSTICA AVAN√áADA", align="J")
    pdf.set_font("Times", "", 12)
    pdf.multi_cell(0, 7, f"Desvio Padr√£o dos Picos: {desvio_padrao:.0f} W", align="J")
    pdf.multi_cell(0, 7, f"Coeficiente de Varia√ß√£o: {coef_variacao:.1f}% - {interpretacao_diversidade}", align="J")
    pdf.multi_cell(0, 7, f"Intervalo de Confian√ßa (95%): {ic_inferior:.0f} W - {ic_superior:.0f} W", align="J")
    pdf.multi_cell(0, 7, f"Amplitude de Varia√ß√£o: {(pico_max - pico_min):.0f} W", align="J")
    pdf.ln(5)
    pdf.multi_cell(0, 7, f"Consumo M√©dio Di√°rio: {consumo_medio:.1f} kWh", align="J")
    pdf.multi_cell(0, 7, f"Fator de Carga M√©dio: {fator_carga_medio:.1f}% - {interpretacao_fator_carga}", align="J")
    pdf.multi_cell(0, 7, f"Fator de Diversidade: {fator_diversidade:.2f}", align="J")
    pdf.multi_cell(0, 7, f"Densidade de Carga: {(pico_medio / sum(instancias_por_comodo.values())):.2f} W/unidade", align="J")
    pdf.ln(10)

    # 6. Recomenda√ß√µes T√©cnicas para Dimensionamento
    pdf.set_font("Times", "B", 14)
    pdf.multi_cell(0, 10, "6. RECOMENDA√á√ïES T√âCNICAS PARA DIMENSIONAMENTO", align="J")
    pdf.set_font("Times", "", 12)
    pdf.multi_cell(0, 7, f"Capacidade Recomendada para Transformadores: {capacidade_recomendada:.0f} W (P95 + 20% de margem de seguran√ßa)", align="J")
    pdf.multi_cell(0, 7, "Dimensionamento de Condutores: Baseado na capacidade recomendada, considerando fatores de corre√ß√£o por temperatura e agrupamento conforme NBR 5410", align="J")
    pdf.multi_cell(0, 7, "Sistemas de Prote√ß√£o: Ajustes baseados no P95 com coordena√ß√£o seletiva para garantir continuidade do servi√ßo", align="J")
    pdf.multi_cell(0, 7, f"Fator de Demanda Global: {(pico_95 / (pico_medio * 1.2)):.2f} para aplica√ß√£o em projetos similares", align="J")
    pdf.ln(10)

    # 7. Conclus√µes e Considera√ß√µes Finais
    pdf.set_font("Times", "B", 14)
    pdf.multi_cell(0, 10, "7. CONCLUS√ïES E CONSIDERA√á√ïES FINAIS", align="J")
    pdf.set_font("Times", "", 12)
    pdf.multi_cell(0, 7, f"A simula√ß√£o Monte Carlo realizada com {num_simulacoes:,} cen√°rios independentes fornece uma base estatisticamente robusta para o dimensionamento da infraestrutura el√©trica do estabelecimento hoteleiro. A metodologia de inst√¢ncias individualizadas permite capturar adequadamente o fator de diversidade, resultando em dimensionamentos mais precisos e economicamente otimizados.", align="J")
    pdf.multi_cell(0, 7, "Os resultados apresentados baseiam-se nas configura√ß√µes de equipamentos e padr√µes de uso fornecidos. Mudan√ßas significativas no perfil de ocupa√ß√£o, introdu√ß√£o de novos tipos de equipamentos ou altera√ß√µes nos h√°bitos dos usu√°rios podem impactar os resultados e requerem reavalia√ß√£o da simula√ß√£o.", align="J")
    pdf.multi_cell(0, 7, f"A capacidade recomendada de {capacidade_recomendada:.0f} W (baseada no P95 com margem de seguran√ßa) oferece um equil√≠brio adequado entre confiabilidade operacional e viabilidade econ√¥mica. Esta recomenda√ß√£o considera as melhores pr√°ticas da engenharia el√©trica e est√° alinhada com normas t√©cnicas nacionais e internacionais.", align="J")
    pdf.multi_cell(0, 7, "Recomenda-se fortemente a implementa√ß√£o de sistemas de monitoramento cont√≠nuo para valida√ß√£o dos resultados e refinamento progressivo dos modelos de simula√ß√£o. Esta abordagem permite otimiza√ß√£o cont√≠nua da opera√ß√£o e identifica√ß√£o precoce de necessidades de adequa√ß√£o da infraestrutura.", align="J")
    pdf.ln(10)

    # Rodap√©
    pdf.set_font("Times", "I", 10)
    pdf.multi_cell(0, 6, "Relat√≥rio T√©cnico Gerado Automaticamente", align="C")
    pdf.multi_cell(0, 6, "Sistema: Simula√ß√£o Monte Carlo com Inst√¢ncias Individualizadas", align="C")
    pdf.multi_cell(0, 6, "Desenvolvido por Matheus Vianna | matheusvianna.com", align="C", link="https://matheusvianna.com")
    pdf.multi_cell(0, 6, f"An√°lise baseada em {num_simulacoes:,} simula√ß√µes independentes | Metodologia validada conforme pr√°ticas da engenharia el√©trica", align="C")
    pdf.multi_cell(0, 6, "Para quest√µes t√©cnicas ou esclarecimentos adicionais, consulte a documenta√ß√£o t√©cnica do sistema", align="C")

    return pdf.output(dest='S').encode('latin1')

# --- Interface do Streamlit ---

# Se√ß√£o 1: Configura√ß√£o de Dados
st.header("‚öôÔ∏è Configura√ß√£o de Dados")

# Op√ß√£o de entrada de dados
entrada_dados = st.radio(
    "M√©todo de entrada de dados:",
    ["üìÅ Upload de arquivo Excel", "‚úèÔ∏è Entrada direta de dados"],
    help="Escolha como deseja inserir os dados dos c√¥modos",
    horizontal=True
)

if entrada_dados == "üìÅ Upload de arquivo Excel":
    # Upload do arquivo Excel
    uploaded_file = st.file_uploader(
        "Carregar arquivo Excel com dados dos c√¥modos",
        type=["xlsx", "xls"],
        help="O arquivo deve conter abas com os nomes dos c√¥modos e colunas: Equipamento, Pot√™ncia, Quantidade, Tipo de intervalo, intervalo, probabilidade, FD"
    )
    
    if uploaded_file is not None:
        try:
            # Carrega os c√¥modos do arquivo Excel
            if 'comodos' not in st.session_state or st.session_state.get('data_source') != 'excel':
                st.session_state.comodos = cria_comodos_do_excel(uploaded_file)
                st.session_state.data_source = 'excel'
            
            # Mostra informa√ß√µes sobre os c√¥modos carregados
            st.success(f"‚úÖ {len(st.session_state.comodos)} c√¥modos carregados:")
            for comodo in st.session_state.comodos:
                st.write(f"- {comodo.nome}")
                
        except Exception as e:
            st.error(f"Erro ao processar o arquivo: {str(e)}")
            st.info("Verifique se o arquivo Excel possui o formato correto com as colunas necess√°rias.")

else:  # Entrada direta de dados
    st.subheader("‚úèÔ∏è Entrada Direta de Dados")
    
    # Inicializa o estado se necess√°rio
    if 'comodos_data' not in st.session_state:
        st.session_state.comodos_data = {}
    
    # N√∫mero de tipos de c√¥modos
    num_comodos = st.number_input(
        "N√∫mero de tipos de c√¥modos:",
        min_value=1,
        max_value=10,
        value=1,
        step=1
    )
    
    # Interface para cada tipo de c√¥modo
    for i in range(num_comodos):
        with st.expander(f"üè† C√¥modo {i+1}"):
            comodo_nome = st.text_input(
                f"Nome do c√¥modo {i+1}:",
                value=f"Quarto {i+1}",
                key=f"nome_comodo_{i}"
            )
            
            num_equipamentos = st.number_input(
                f"N√∫mero de equipamentos:",
                min_value=1,
                max_value=10,
                value=3,
                step=1,
                key=f"num_eq_{i}"
            )
            
            # Dados dos equipamentos para este c√¥modo
            equipamentos_data = []
            for j in range(num_equipamentos):
                st.write(f"**Equipamento {j+1}:**")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    nome_eq = st.text_input(
                        "Nome:",
                        value=f"Equipamento {j+1}",
                        key=f"nome_eq_{i}_{j}"
                    )
                    
                    potencia = st.number_input(
                        "Pot√™ncia (W):",
                        min_value=1,
                        max_value=10000,
                        value=100,
                        step=10,
                        key=f"pot_{i}_{j}"
                    )
                
                with col2:
                    quantidade = st.number_input(
                        "Quantidade:",
                        min_value=1,
                        max_value=50,
                        value=1,
                        step=1,
                        key=f"qtd_{i}_{j}"
                    )
                    
                    tipo_intervalo = st.selectbox(
                        "Tipo de intervalo:",
                        ["fixo", "din√¢mico"],
                        key=f"tipo_{i}_{j}"
                    )
                
                with col3:
                    if tipo_intervalo == "fixo":
                        intervalo = st.text_input(
                            "Intervalo (HH:MM as HH:MM):",
                            value="08:00 as 18:00",
                            key=f"int_{i}_{j}"
                        )
                    else:
                        intervalo = st.text_input(
                            "Intervalo din√¢mico:",
                            value="In√≠cio entre 08:00-10:00, dura√ß√£o 8",
                            key=f"int_{i}_{j}"
                        )
                    
                    probabilidade = st.slider(
                        "Probabilidade:",
                        min_value=0.0,
                        max_value=1.0,
                        value=1.0,
                        step=0.1,
                        key=f"prob_{i}_{j}"
                    )
                    
                    fd = st.slider(
                        "Fator de Demanda:",
                        min_value=0.1,
                        max_value=1.0,
                        value=1.0,
                        step=0.1,
                        key=f"fd_{i}_{j}"
                    )
                
                equipamentos_data.append({
                    'Equipamento': nome_eq,
                    'Pot√™ncia': potencia,
                    'Quantidade': quantidade,
                    'Tipo de intervalo': tipo_intervalo,
                    'intervalo': intervalo,
                    'probabilidade': probabilidade,
                    'FD': fd
                })
            
            # Armazena os dados do c√¥modo
            st.session_state.comodos_data[comodo_nome] = pd.DataFrame(equipamentos_data)
    
    # Bot√£o para processar dados inseridos
    if st.button("üìù Processar Dados Inseridos", type="primary"):
        try:
            # Cria os c√¥modos a partir dos dados inseridos
            st.session_state.comodos = cria_comodos_do_dataframe(st.session_state.comodos_data)
            st.session_state.data_source = 'manual'
            
            st.success(f"‚úÖ {len(st.session_state.comodos)} c√¥modos processados:")
            for comodo in st.session_state.comodos:
                st.write(f"- {comodo.nome}")
                
        except Exception as e:
            st.error(f"Erro ao processar dados: {str(e)}")

# Continua apenas se houver c√¥modos carregados
if 'comodos' in st.session_state and st.session_state.comodos:
    
    # Se√ß√£o 2: Par√¢metros de Simula√ß√£o
    st.header("üéØ Par√¢metros de Simula√ß√£o")
    
    col1, col2 = st.columns(2)
    
    with col1:
        num_simulacoes = st.slider(
            "N√∫mero de simula√ß√µes",
            min_value=100,
            max_value=10000,
            value=1000,
            step=100,
            help="Maior n√∫mero de simula√ß√µes = resultados mais precisos, mas processamento mais lento"
        )
    
    with col2:
        tempo_total = st.slider(
            "Tempo total (minutos)",
            min_value=60,
            max_value=1440,
            value=1440,
            step=60,
            help="1440 minutos = 24 horas (1 dia completo)"
        )
    
    # Se√ß√£o 3: Inst√¢ncias por C√¥modo
    st.header("üè† Inst√¢ncias por C√¥modo")
    
    instancias_por_comodo = {}
    
    # Organiza em colunas para melhor layout
    num_cols = min(3, len(st.session_state.comodos))
    cols = st.columns(num_cols)
    
    for idx, comodo in enumerate(st.session_state.comodos):
        col_idx = idx % num_cols
        with cols[col_idx]:
            instancias_por_comodo[comodo.nome] = st.number_input(
                f"{comodo.nome}",
                min_value=1,
                max_value=200,
                value=1,
                step=1,
                key=f"inst_{comodo.nome}"
            )
    
    # Se√ß√£o 4: Executar Simula√ß√£o
    st.header("üöÄ Executar Simula√ß√£o")
    
    if st.button("üöÄ Executar Simula√ß√£o Monte Carlo", type="primary", use_container_width=True):
        with st.spinner("Executando simula√ß√£o Monte Carlo..."):
            # Executa a simula√ß√£o principal
            picos, perfis, consumos = simula_carga_total(
                st.session_state.comodos,
                instancias_por_comodo,
                num_simulacoes=num_simulacoes,
                tempo_total=tempo_total
            )
            
            # Armazena os resultados no session_state
            st.session_state.resultados = {
                'picos': picos,
                'perfis': perfis,
                'consumos': consumos,
                'instancias_por_comodo': instancias_por_comodo,
                'num_simulacoes': num_simulacoes,
                'tempo_total': tempo_total
            }
        
        st.success("‚úÖ Simula√ß√£o conclu√≠da!")
    
    # Se√ß√£o 5: Resultados (exibidos abaixo se dispon√≠veis)
    if 'resultados' in st.session_state:
        st.header("üìä Resultados da Simula√ß√£o")
        
        resultados = st.session_state.resultados
        picos = resultados["picos"]
        perfis = resultados["perfis"]
        consumos = resultados["consumos"]
        
        # Estat√≠sticas dos picos
        pico_medio = np.mean(picos)
        pico_max = np.max(picos)
        pico_min = np.min(picos)
        pico_95 = np.percentile(picos, 95)
        
        # Bot√£o para gerar PDF
        col_pdf1, col_pdf2 = st.columns([3, 1])
        with col_pdf2:
            if st.button("üìÑ Gerar Relat√≥rio PDF", type="secondary"):
                with st.spinner("Gerando relat√≥rio PDF t√©cnico..."):
                    # Lista para armazenar as imagens dos gr√°ficos
                    imagens_graficos = []
                    
                    # 1. Distribui√ß√£o dos picos
                    fig, ax = plt.subplots(figsize=(10, 6))
                    ax.hist(picos, bins=30, alpha=0.7, edgecolor='black', density=True)
                    ax.axvline(pico_medio, color='red', linestyle='dashed', linewidth=2, label=f'M√©dia: {pico_medio:.0f} W')
                    ax.axvline(pico_95, color='green', linestyle='dashed', linewidth=2, label=f'P95: {pico_95:.0f} W')
                    ax.set_title("Distribui√ß√£o dos Picos de Carga")
                    ax.set_xlabel("Pico de Carga (W)")
                    ax.set_ylabel("Frequ√™ncia Normalizada")
                    ax.legend()
                    ax.grid(True)
                    caminho_img = salvar_grafico(fig, "distribuicao_picos")
                    imagens_graficos.append({"titulo": "Distribui√ß√£o dos Picos de Carga", "caminho": caminho_img, "descricao": "Este histograma apresenta a distribui√ß√£o estat√≠stica dos picos de demanda el√©trica obtidos atrav√©s das simula√ß√µes Monte Carlo. A an√°lise da forma da distribui√ß√£o fornece insights sobre a previsibilidade do comportamento da carga: distribui√ß√µes mais concentradas (baixo desvio padr√£o) indicam comportamento mais previs√≠vel, enquanto distribui√ß√µes mais dispersas sugerem maior variabilidade operacional. A linha vermelha tracejada representa a demanda m√©dia m√°xima esperada, enquanto a linha verde indica o percentil 95 (P95), valor amplamente utilizado na engenharia el√©trica como refer√™ncia para dimensionamento de transformadores e sistemas de prote√ß√£o, pois garante que 95% dos cen√°rios simulados apresentem demanda inferior a este valor."})
                    plt.close(fig)
                    
                    # 2. Curva de dura√ß√£o de carga
                    todas_cargas = np.concatenate(perfis)
                    todas_cargas_sorted = np.sort(todas_cargas)[::-1]
                    frac_tempo = np.arange(1, len(todas_cargas_sorted) + 1) / len(todas_cargas_sorted)
                    
                    fig, ax = plt.subplots(figsize=(10, 6))
                    ax.plot(frac_tempo * 100, todas_cargas_sorted, label="Load Duration Curve", linewidth=2)
                    ax.set_title("Curva de Dura√ß√£o de Carga")
                    ax.set_xlabel("Fra√ß√£o do Tempo (%)")
                    ax.set_ylabel("Carga (W)")
                    ax.grid(True)
                    ax.legend()
                    caminho_img = salvar_grafico(fig, "curva_duracao")
                    imagens_graficos.append({"titulo": "Curva de Dura√ß√£o de Carga", "caminho": caminho_img, "descricao": "A Curva de Dura√ß√£o de Carga (CDC) √© uma ferramenta fundamental para an√°lise energ√©tica que apresenta os valores de demanda em ordem decrescente de magnitude, revelando por quanto tempo cada n√≠vel de carga √© mantido ou excedido durante o per√≠odo analisado. Esta curva √© essencial para estudos de viabilidade econ√¥mica de sistemas de gera√ß√£o distribu√≠da, dimensionamento de sistemas de armazenamento de energia e an√°lise de contratos de fornecimento com tarifa√ß√£o diferenciada por hor√°rio. A inclina√ß√£o da curva indica a variabilidade da demanda: curvas mais √≠ngremes sugerem grandes varia√ß√µes entre picos e vales de consumo, enquanto curvas mais suaves indicam demanda mais constante ao longo do tempo."})
                    plt.close(fig)
                    
                    # 3. Perfil de carga m√©dio
                    media_por_minuto = np.mean(perfis, axis=0)
                    horas = np.arange(tempo_total) / 60.0
                    
                    fig, ax = plt.subplots(figsize=(12, 6))
                    ax.plot(horas, media_por_minuto, linewidth=2, label="Carga M√©dia", color='#2c3e50')
                    ax.fill_between(horas, media_por_minuto, alpha=0.3, color='#3498db')
                    ax.set_xlabel("Hora do Dia")
                    ax.set_ylabel("Carga (W)")
                    ax.set_title("Perfil de Carga M√©dio Durante o Dia")
                    ax.grid(True, alpha=0.3)
                    ax.legend()
                    caminho_img = salvar_grafico(fig, "perfil_carga")
                    imagens_graficos.append({"titulo": "Perfil de Carga M√©dio Durante o Dia", "caminho": caminho_img, "descricao": "O perfil de carga m√©dio representa o comportamento t√≠pico da demanda el√©trica ao longo de um ciclo di√°rio de 24 horas, calculado a partir da m√©dia aritm√©tica de todas as simula√ß√µes realizadas. Este gr√°fico √© fundamental para o planejamento operacional do sistema el√©trico, permitindo identificar os hor√°rios de maior e menor demanda, que s√£o cruciais para estrat√©gias de gest√£o energ√©tica e otimiza√ß√£o de custos. Os picos de demanda geralmente coincidem com per√≠odos de maior atividade dos h√≥spedes, como check-in/check-out, hor√°rios de refei√ß√µes e per√≠odos noturnos. A an√°lise deste perfil tamb√©m orienta decis√µes sobre implementa√ß√£o de sistemas de gest√£o autom√°tica de cargas, dimensionamento de sistemas de climatiza√ß√£o e ventila√ß√£o."})
                    plt.close(fig)
                    
                    # 4. Gr√°fico de pot√™ncia cumulativa por c√¥modo
                    comodos_cargas_medias = {}
                    for comodo_obj in st.session_state.comodos:
                        comodo_copia = copy.deepcopy(comodo_obj)
                        instancias_para_comodo = {comodo_copia.nome: instancias_por_comodo.get(comodo_copia.nome, 1)}
                        _, perfis_comodo, _ = simula_carga_total(
                            [comodo_copia],
                            instancias_para_comodo,
                            num_simulacoes=num_simulacoes,
                            tempo_total=tempo_total
                        )
                        comodos_cargas_medias[comodo_obj.nome] = np.mean(perfis_comodo, axis=0)

                    if comodos_cargas_medias:
                        horas = np.arange(tempo_total) / 60.0
                        
                        fig, ax = plt.subplots(figsize=(14, 8))
                        comodos_nomes = list(comodos_cargas_medias.keys())
                        comodos_valores = [comodos_cargas_medias[nome] for nome in comodos_nomes]
                        
                        ax.stackplot(horas, *comodos_valores, labels=comodos_nomes, alpha=0.8)
                        ax.set_xlabel("Hora do Dia")
                        ax.set_ylabel("Pot√™ncia (W)")
                        ax.set_title("Pot√™ncia Cumulativa por C√¥modo ao Longo do Dia")
                        ax.legend(loc='upper left', bbox_to_anchor=(1, 1))
                        ax.grid(True, alpha=0.3)
                        plt.tight_layout()
                        
                        caminho_img = salvar_grafico(fig, "potencia_cumulativa_comodo")
                        imagens_graficos.append({"titulo": "Pot√™ncia Cumulativa por C√¥modo ao Longo do Dia", "caminho": caminho_img, "descricao": "Este gr√°fico de √°rea empilhada (stackplot) ilustra a contribui√ß√£o individual de cada tipo de c√¥modo para a demanda total do estabelecimento ao longo do ciclo di√°rio. A an√°lise permite identificar quais categorias de c√¥modos s√£o os principais consumidores de energia em diferentes hor√°rios, fornecendo informa√ß√µes valiosas para estrat√©gias de efici√™ncia energ√©tica e prioriza√ß√£o de investimentos. A espessura de cada camada representa a magnitude da contribui√ß√£o de cada tipo de c√¥modo, enquanto a varia√ß√£o ao longo do tempo revela padr√µes de uso espec√≠ficos. Esta visualiza√ß√£o √© particularmente √∫til para gestores hoteleiros na tomada de decis√µes sobre retrofit de equipamentos, implementa√ß√£o de sistemas de automa√ß√£o e desenvolvimento de pol√≠ticas de sustentabilidade, permitindo focar esfor√ßos nos c√¥modos com maior impacto no consumo total."})
                        plt.close(fig)
                    
                    # Gera o PDF com as imagens
                    pdf_data = gerar_pdf_relatorio(
                        resultados, 
                        instancias_por_comodo, 
                        num_simulacoes, 
                        tempo_total,
                        imagens_graficos,
                        st.session_state.comodos_data if st.session_state.data_source == 'manual' else None,
                        st.session_state.comodos
                    )
                    
                    # Cria link para download
                    b64_pdf = base64.b64encode(pdf_data).decode('latin1')
                    href = f"\n<a href=\"data:application/pdf;base64,{b64_pdf}\" download=\"relatorio_tecnico_monte_carlo.pdf\">üì• Download do Relat√≥rio T√©cnico PDF</a>\n"
                    st.markdown(href, unsafe_allow_html=True)
                    st.success("‚úÖ Relat√≥rio t√©cnico PDF gerado com sucesso!")
        
        # M√©tricas principais
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Pico M√©dio", f"{pico_medio:.0f} W")
        
        with col2:
            st.metric("Pico M√°ximo", f"{pico_max:.0f} W")
        
        with col3:
            st.metric("Pico M√≠nimo", f"{pico_min:.0f} W")
        
        with col4:
            st.metric("Percentil 95", f"{pico_95:.0f} W")
        
        # Tabs para diferentes an√°lises (removida a aba "Varia√ß√£o da Carga")
        tab1, tab2, tab3, tab4 = st.tabs([
            "üìä Distribui√ß√£o dos Picos",
            "üìà Curva de Dura√ß√£o",
            "‚ö° Perfil de Carga",
            "üìà Pot√™ncia Cumulativa por C√¥modo"
        ])
        
        with tab1:
            st.subheader("Distribui√ß√£o Global dos Picos de Carga")
            st.write("Este histograma apresenta a distribui√ß√£o estat√≠stica dos picos de demanda el√©trica obtidos atrav√©s das simula√ß√µes Monte Carlo. A an√°lise da forma da distribui√ß√£o fornece insights sobre a previsibilidade do comportamento da carga: distribui√ß√µes mais concentradas (baixo desvio padr√£o) indicam comportamento mais previs√≠vel, enquanto distribui√ß√µes mais dispersas sugerem maior variabilidade operacional. A linha vermelha tracejada representa a demanda m√©dia m√°xima esperada, enquanto a linha verde indica o percentil 95 (P95), valor amplamente utilizado na engenharia el√©trica como refer√™ncia para dimensionamento de transformadores e sistemas de prote√ß√£o, pois garante que 95% dos cen√°rios simulados apresentem demanda inferior a este valor.")
            
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.hist(picos, bins=30, alpha=0.7, edgecolor='black', density=True, color='#3498db')
            ax.axvline(pico_medio, color='red', linestyle='dashed', linewidth=2, label=f'M√©dia: {pico_medio:.0f} W')
            ax.axvline(pico_95, color='green', linestyle='dashed', linewidth=2, label=f'P95: {pico_95:.0f} W')
            ax.set_title("Distribui√ß√£o Global dos Picos de Carga")
            ax.set_xlabel("Pico de Carga (W)")
            ax.set_ylabel("Frequ√™ncia Normalizada")
            ax.legend()
            ax.grid(True, alpha=0.3)
            st.pyplot(fig)
            
            # Probabilidade de Exced√™ncia dos Picos
            st.subheader("Probabilidade de Exced√™ncia dos Picos")
            st.write("Este gr√°fico mostra a probabilidade de um determinado pico de carga ser excedido. √â uma ferramenta importante para avaliar o risco de sobrecarga e para o dimensionamento de sistemas de prote√ß√£o.")
            
            picos_sorted = np.sort(picos)
            prob_excedencia = 1 - (np.arange(1, len(picos_sorted) + 1) / len(picos_sorted))
            
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(picos_sorted, prob_excedencia * 100, label="Probabilidade de Exced√™ncia", linewidth=2, color='#e74c3c')
            ax.set_title("Probabilidade de Exced√™ncia dos Picos Di√°rios")
            ax.set_xlabel("Pico de Carga (W)")
            ax.set_ylabel("Probabilidade de Exced√™ncia (%)")
            ax.grid(True, alpha=0.3)
            ax.legend()
            st.pyplot(fig)
        
        with tab2:
            st.subheader("Curva de Dura√ß√£o de Carga (Load Duration Curve)")
            st.write("A Curva de Dura√ß√£o de Carga apresenta os valores de demanda em ordem decrescente, revelando por quanto tempo cada n√≠vel de carga √© mantido. √â essencial para estudos de viabilidade econ√¥mica e dimensionamento de sistemas de armazenamento de energia.")
            
            todas_cargas = np.concatenate(perfis)
            todas_cargas_sorted = np.sort(todas_cargas)[::-1]
            frac_tempo = np.arange(1, len(todas_cargas_sorted) + 1) / len(todas_cargas_sorted)
            
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(frac_tempo * 100, todas_cargas_sorted, label="Curva de Dura√ß√£o", linewidth=2, color='#9b59b6')
            ax.set_title("Curva de Dura√ß√£o de Carga (Hotel)")
            ax.set_xlabel("Fra√ß√£o do Tempo (%)")
            ax.set_ylabel("Carga (W)")
            ax.grid(True, alpha=0.3)
            ax.legend()
            st.pyplot(fig)
        
        with tab3:
            st.subheader("Perfil de Carga M√©dio ao Longo do Dia")
            st.write("Este gr√°fico exibe o comportamento t√≠pico da demanda el√©trica durante um ciclo di√°rio, revelando padr√µes de consumo e hor√°rios de pico. √â fundamental para o planejamento operacional e estrat√©gias de gest√£o energ√©tica.")
            
            media_por_minuto = np.mean(perfis, axis=0)
            horas = np.arange(tempo_total) / 60.0
            
            fig, ax = plt.subplots(figsize=(12, 6))
            ax.plot(horas, media_por_minuto, linewidth=2, label="Carga M√©dia", color='#2c3e50')
            ax.fill_between(horas, media_por_minuto, alpha=0.3, color='#3498db')
            ax.set_xlabel("Hora do Dia")
            ax.set_ylabel("Carga (W)")
            ax.set_title("Perfil de Carga M√©dio Durante o Dia")
            ax.grid(True, alpha=0.3)
            ax.legend()
            st.pyplot(fig)
            
            # Fator de Carga por Hora
            st.subheader("Fator de Carga por Hora do Dia")
            st.write("O fator de carga indica a efici√™ncia da utiliza√ß√£o da capacidade el√©trica em cada hora. Valores mais altos sugerem uso mais consistente da infraestrutura.")
            
            pico_por_minuto = np.max(perfis, axis=0)
            fator_carga_por_hora = []
            for h in range(24):
                inicio = h * 60
                fim = inicio + 60
                carga_media_h = np.mean(media_por_minuto[inicio:fim])
                pico_h = np.max(pico_por_minuto[inicio:fim])
                fator = carga_media_h / pico_h if pico_h > 0 else 0
                fator_carga_por_hora.append(fator)
            
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.bar(np.arange(24), fator_carga_por_hora, color='#f39c12', alpha=0.8)
            ax.set_xlabel("Hora do Dia")
            ax.set_ylabel("Fator de Carga")
            ax.set_title("Fator de Carga por Hora do Dia")
            ax.set_xticks(np.arange(24))
            ax.grid(True, axis='y', linestyle='--', alpha=0.7)
            st.pyplot(fig)
        
        with tab4:
            st.subheader("Gr√°fico de Pot√™ncia Cumulativa por C√¥modo")
            st.write("Este gr√°fico de √°rea empilhada mostra a contribui√ß√£o de cada tipo de c√¥modo para a demanda total, permitindo identificar os maiores consumidores e orientar estrat√©gias de efici√™ncia energ√©tica.")
            
            # Calcula a carga m√©dia de cada c√¥modo individualmente
            comodos_cargas_medias = {}
            for comodo_obj in st.session_state.comodos:
                comodo_copia = copy.deepcopy(comodo_obj)
                instancias_para_comodo = {comodo_copia.nome: instancias_por_comodo.get(comodo_copia.nome, 1)}
                _, perfis_comodo, _ = simula_carga_total(
                    [comodo_copia],
                    instancias_para_comodo,
                    num_simulacoes=num_simulacoes,
                    tempo_total=tempo_total
                )
                comodos_cargas_medias[comodo_obj.nome] = np.mean(perfis_comodo, axis=0)

            if comodos_cargas_medias:
                horas = np.arange(tempo_total) / 60.0
                
                fig, ax = plt.subplots(figsize=(14, 8))
                comodos_nomes = list(comodos_cargas_medias.keys())
                comodos_valores = [comodos_cargas_medias[nome] for nome in comodos_nomes]
                
                ax.stackplot(horas, *comodos_valores, labels=comodos_nomes, alpha=0.8)
                ax.set_xlabel("Hora do Dia")
                ax.set_ylabel("Pot√™ncia (W)")
                ax.set_title("Pot√™ncia Cumulativa por C√¥modo ao Longo do Dia")
                ax.legend(loc='upper left', bbox_to_anchor=(1, 1))
                ax.grid(True, alpha=0.3)
                plt.tight_layout()
                st.pyplot(fig)
            else:
                st.warning("N√£o foi poss√≠vel gerar o gr√°fico de pot√™ncia cumulativa por c√¥modo. Verifique a configura√ß√£o dos c√¥modos.")

else:
    if entrada_dados == "üìÅ Upload de arquivo Excel":
        st.info("üëÜ Por favor, carregue um arquivo Excel acima para come√ßar a simula√ß√£o.")
        
        # Exemplo de formato esperado
        st.subheader("üìã Formato Esperado do Arquivo Excel")
        
        exemplo_df = pd.DataFrame({
            'Equipamento': ['Ar Condicionado', 'Ilumina√ß√£o', 'TV'],
            'Pot√™ncia': [2000, 100, 150],
            'Quantidade': [1, 4, 1],
            'Tipo de intervalo': ['din√¢mico', 'fixo', 'fixo'],
            'intervalo': ['In√≠cio entre 14:00-18:00, dura√ß√£o 6', '18:00 as 23:00', '19:00 as 23:00'],
            'probabilidade': [0.8, 1.0, 0.9],
            'FD': [0.8, 1.0, 1.0]
        })
        
        st.dataframe(exemplo_df)
        
        st.markdown("""
        **Instru√ß√µes:**
        - Cada aba do Excel deve representar um tipo de c√¥modo (ex: "Quarto 1", "Quarto 3", etc.)
        - As colunas obrigat√≥rias s√£o: Equipamento, Pot√™ncia, Quantidade, Tipo de intervalo, intervalo, probabilidade, FD
        - **Tipo de intervalo**: "fixo" ou "din√¢mico"
        - **intervalo**: Para fixo use formato "HH:MM as HH:MM", para din√¢mico use "In√≠cio entre HH:MM-HH:MM, dura√ß√£o X"
        - **probabilidade**: Valor entre 0 e 1 (probabilidade do equipamento estar ligado)
        - **FD**: Fator de demanda (valor entre 0 e 1)
        """)
    else:
        st.info("üëÜ Por favor, configure os dados dos c√¥modos acima e clique em 'Processar Dados Inseridos'.")









